Bus Reservation system initial phase analysis.

1.	Creating library that holds information on bank account of the user.
-	When the user reserves a seat, the program we are building should check the bank balance and security number of the customer. In order to do that, the library called bankAccountNumber has to be created, and included in the main C++ program.
What is in bankAccountNumber.h library
1.	Struct Account
Create a structure called account give it a data members name, accountNumber, balance, and securityCode.
o	String name – to hold the name of the bank user
o	Int accountNumber – to store the account of the bank, user
o	Float balance – to store the balance of the user
o	Int securityCode – should be generated by the program for all user and should be unique
2.	A function that adds information on the user, like name, accountNumber, balance and securityCode
3.	A function that checks the balance and security code entered by the customer when reserving bus. This function should return true if the bank accountNumber and back SecurityCode entered by the user is found, false otherwise.

2.	Create  a library that holds information about the destination city, initial city, and bus.
Why creating library for this?
	The answer is just for code readability and simplicity. If we a code that adds information about the cities and buses to the main program, our code goes very long and it would be very difficult to understand. For that reason, we should create a library that does the above functionality and call it’s function in the main program.

What does this library include?
1.	Create two structures called Bus and City in this library. 
A.	Struct Bus – data members or variables that should be added to this structure are - -int  bus_dest_code(in the program each destination city have it’s own code, bus_dest_code stores code of each destination city), 
     -string   bus_code – this variable stores the code for each buses that travels to destination    city. For example, if 2 buses travels from Jimma to AA, the two buses will have bus_dest_code of 1000, and since there is 2 buses, each bus will have it’s own bus_code. For Example, bus1 can have 1000A and bus 2 can have 1000B.
- int seatAvailable – keeps track of seats available for each bus
- string leaving_time – stores the leaving time of each buses
B. Struct City – variables in this structure are
- string dest_name – stores the city name
- float km_from_AA, stores the distance of a city from AA
String direction – stores the direction of a city from AA
	Bus busDestInfo – this is nested structure in the City. 
Why Nesting Bus structure in the City structure?
Example: let the destination be Jimma. The nested structure is used to store the code of the bus, leaving time, and checking the seat available for the bus travelling to Jimma. This allows us to append a bus to each destination.
2.	Create three arrays
1.	String city []  -  to store the names of the city available for travelling before the administrator adds/removes city
2.	 Float distance_AA [] – to store the distance of each city from AA. Since we do not have maps to calculate a between two cities we use AA as a center.
3.	String direction__AA [] – to store the direction of cites from AA.
4.	String leaving_time []- to store the time at which each buses leave
3.	Create a function that adds the information in the array to Bus Struct and Destination Struct
3. Inside a main Program
1. include all useful libraries including bankAccountNumber.h and bus_city_info.h
2. Create structure named reserve that holds the information about reservation.
Member variables in these structure are
o	String fname – to hold the name of the customer reserving a seat
o	String destination, initial_city – to hold the name of city the customer is travelling from and travelling to
o	Int payement  - to hold the total payment a customer pays
o	Int accountNumber – to store a accountNumber a customer gives when reserving a seat
o	Int SecurityNumber – to store the security code of the customer bankAccount
o	Int reservd_seat – to store the seat Number the customer reserved
o	Int ticket_size  - to store the the ticket number the customer bought
o	Int return_oneWay – to store if the customer chooses to return from the destination by the same bus
o	Float travelling distance – to store the distance between the initial city and destination city
o	String resrvd_bus – to store the bus code the customer reserves
o	String leaving_time – to store the leaving time of the bus that customer reserved
o	Bool is_reserved – to check if the customer reserved a seat or not
3.  List of the functions needed in the program
1.  create a function that shows Home page of the program
2. create a function that responds to user requests
3. create a function that allows searching for destination city
4. create a function that allows the customer to reserve a seat
5. create a function that calculates distance between destination city and initial city
6. create a function that assigns bus to customer destination city(this function should also check whether the seat is available or not)
7. create a function that asks the customer whether he wants to buy a ticket or not( a function that asks the customer for confirmation)
8. create a function that calculates payment based on the distance the customer travels and ticket size
9. make the program to request whether the customer has the balance required to buy a ticket in his bank Account or not. 

Note: This analysis is not mandatory to follow, you can create your own program. I just think it will be simple, if we write our code this way.
